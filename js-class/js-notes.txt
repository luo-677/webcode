JS代码的执行：
    (1)直接将代码写在script标签中
    (2)使用script标签进行文件引入
    注意：script标签又一个type属性，默认为text/javascript
    js代码从上往下依次执行

js中的基本输出语句：
    (1)alert(xxx);
    (2)console.log(xxx);
    (3)document.write(xxx);

js中的基本输入语句：
    (1)confirm(xxx);
    (2)prompt(xxx); 返回值为字符串类型

js的代码分为两个部分：
    (1)语句----可以被执行的代码
    (2)注释
        单行注释
        多行注释
        文档注释

js的报错执行：
    (1)js在执行的过程中，如果出现错误，就会停止继续执行
    (2)代码块之间不受影响，且不会影响CSS/HTML的解析

变量：
    定义：
        (1)用于存储信息的容器
        (2)可以改变的值
    声明：
        使用关键字var进行声明
        关键字进行声明，但是没有赋值时，初始值为undefined
        注意：
            (1)变量可以在声明时进行赋值，也可以在声明后进行赋值
            (2)多个变量可以一起进行声明，使用逗号进行隔开

命名规范：
    (1)大驼峰命名法 构造函数和类
    (2)小驼峰命名法 变量和函数
    
基本数据类型：
    (1)Undefined
    (2)Null
    (3)Boolean
    (4)Number (NaN Infinity)
    (5)String

引用数据类型：
    对象 使用关键字new进行创建
    对象是一组属性和方法的集合
    访问对象的属性使用 . 操作符
    对象添加属性使用 . 或者赋值操作

数据类型检测：
    检测方式：
        typeof(xxx)
    检测类型：
        数字/NaN/infinity 'number'
        字符串 'string'
        布尔类型 'boolean'
        未定义 'undefined'
        null 'object'
        对象 'object'
        函数 'function'

算术运算符：
    + - * / %
    ++n / --n 先进行运算，再使用值
    n++ / n-- 先使用值，再进行运算

关系运算符：
    > >= < <= == != === !==
    结果：返回一个布尔值
    当比较字符串时，自动将字符串转换成unicode编码进行比较

相等比较：
    布尔值转化成数值，true为1，false为0
    数值与字符串进行比较，会将字符串转换为数值
        纯数值字符串转化为数值
        带有非数值的字符串，转化为NaN
        undefined == null true
        NaN == NaN false NaN与任何一个值相等都是false
        null == 0 false
        NaN == undefined false
        0 == 0.000 true
        'NaN' == 'NaN' true
        null == ''null false
        undefined == 'undefined' false
        0.2 + 0.2 == 0.4 true
        0.1 + 0.2 == 0.3 false 精度问题
            解决办法： toFixed()固定小数长度，返回一个字符串
        
全等比较符：
    全等比较符不会进行类型转换，类型不同直接返回false

逻辑操作符：
    ! 会触发值转换成布尔值的操作 对布尔值进行取反
        任何非0的数字转换成布尔值类型都是true
        任何非空字符串转换成布尔值类型的结果都是true
        null undefined NaN 布尔值为false
        任意对象转成布尔值类型的值为true
    可以快速将任意值转换成布尔值类型
        !!n
    // 两者之中一者为真，即为真
    && 两者皆为真，才为真

短路运算：
    cmd1 || cmd2
        cmd1为真，输出cmd1的值，否则输出cmd2的值
    cmd1 && cmd2
        cmd1为真，输出cmd2的值，否则输出cmd1的值

赋值运算：
    赋值符和运算符配合使用
        += -= *= /= %=
    ES2016新增：
        2 ** 4 2的4次方

数据类型转换：
    所有的数据类型都可以转换成布尔值类型
    所有的数据类型都可以转换成字符串类型
    所有的数据类型都可以转换成数值

    null NaN undefined true false => string
        原值转换 直接加上 ""

字符连接符：
     + ：
    (1)算术运算符
        null转换成数值为0
        undefined 转换成数值为NaN，NaN进行任运算都是false
        一元加减号：
            +'11' == 11
            -'11' == -11
            快速将字符串转换成数值
    (2)字符连接符 字符串拼接

条件运算符：
    表达式1 ? 表达式2 : 表达式3;

隐式转换：
    程序在运行和计算过程中自动进行数据类型转换

强制类型转换：
    Number() 可以使用一元+号进行修改
        parseInt() 浮点数
        parseFloat() 整数
    Boolean() 转换成布尔值
        使用!!进行修改
    toString() ('' + xx)
        number使用该方法还能进行进制转换
        num.toString(2) 二进制
        num.toString(8) 八进制
        num.toString(16) 十六进制

if语句：
    当if语句中只有一条语句时，可以省略大括号，写在同一行中
    if...else if...else...

switch语句：
    swith(表达式 变量){
        case 值:
            do...;
            [break;]
        ...
        [default:
            do...;]
    }
    注意:switch常用于分支判断，需要有具体的范围
         break不是必须的，需要看需求进行添加
         case表示确定的某一种情况
    
if-else 和 switch 的区别：
    if-else 可以判断相等，不相等，大小关系，适用性比较广
    switch 判断相等，结构清晰，简洁效率高

while循环：
    while(布尔表达式){
        循环体:需要重复执行的代码;
    }
    注意：在使用while循环语句时，一定要设置出口，不能死循环

break 和 continue：
    break：直接总断当前循环
    continue：结束当前次数循环，进入下一轮循环

do-while循环：
    先进行一次循环，再进行循环条件判断

while 和 do...while 的区别：
    do.while不管在什么样的情况下，至少能执行一次条件块中的代码
    while可能一次都不执行

for语句：
    for(表达式1;表达式2;表达式3;){
        循环体;
    }
    执行顺序：
        (1)表达式1
        (2)表达式2
        (3)代码块
        (4)表达式3
        (5)表达式2
        ... 表达式2不成立，结束循环

函数function：
    是一个大型程序中的某部分代码(子程序)
    函数的作用是对过程进行封装，对细节进行隐藏
    可以看成一个整体，具有独立性
    在面向对象的编程语言中，类或对象的子程序被称作方法
    函数 / 方法 指的都是 function
    function在JS中是一种数据类型，引用数据类型

函数的创建：
    function 用于声明函数
    函数的命名：
        1.函数名可以使用 数字 字母 下划线 美元符
        2.不能使用数字开头
        3.不能使用关键字和保留字
        4.语义化
        5.驼峰命名法
            普通函数和方法 使用小驼峰命名法
            构造函数使用 大驼峰命名法
    声明式函数创建(函数声明)：
        语法
        function 函数名(){}
        函数在声明以后不会立即执行
        需要手动调用执行
        function myFunction(){
            // 函数体
            console.log('hello world');
        }
    赋值式函数创建(函数表达式)：
        将一个匿名函数赋值给一个变量或对象的属性
        函数表达式的结尾一定要添加分号
        var fn = function(){};
    
函数参数的声明和使用：
    函数可以带参数，也可以不带参数
        1.参数仅在函数内部使用
        2.多个参数使用英文逗号隔开
        3.参数声明在小括号中
        4.实际参数可以是任意数据类型
    函数创建的时候小括号就是参数列表
    参数命名与变量名相同
    声明参数相当于在函数中声明了局部变量
    使用形参可以让函数更加灵活
    当声明形参却没有传值时，参数的默认值为undefined
    在ES6中，可以给函数的参数直接设置默认值

参数的传递：
    将变量作为参数传递时，是按值传递的
    在传递参数时，传递的不是变量，而是变量的值
    所以在函数内对参数的修改不影响外部变量的值

arguments：
    每一个函数都有一个arguments属性，且仅在函数中生效
    arguments用于存储实际参数，并且给实参进行了编号
    arguments拥有length属性

函数返回值的使用：
    函数的返回值就是函数的调用结果
        1.函数的返回值使用return设置
        2.函数可以有返回值，也可以没有
        3.每个函数只能有一个返回值
        4.返回值可以是任意数据类型
        5.如果有多个返回值，可以设置成对象
        6.return一旦执行，函数终止
        7.可以使用变量保存函数的返回值
        8.如果函数没有设置返回值，默认返回undefined

JS文件的预编译：
    找到所有的函数声明和变量声明
        将所有的声明函数提前执行
        找到所有的变量声明，在作用域顶部创建变量，赋值为undefined
    在JS中，函数的优先级最高，声明式函数可以在顶部进行调用，赋值式函数需要先声明，后调用

函数的作用域：
    函数的作用域分为两种(变量和函数的作用范围)：
        1.全局作用域
        2.函数作用域

递归函数：
    函数在执行过程中的自调用
    函数一般执行的是相同或相似的功能，且功能可以还原出原始问题
    递归是一种特殊的循环结构
    递归一定要设置出口，否则会导致栈溢出

callee：
    arguments.callee是一个指针，指向当前的函数

匿名函数：
    为什么要使用匿名函数？
        匿名函数在创建的时候，不会被写入作用域链对象
        仅在调用时临时创建，作用域链的活动对象
        在函数执行结束后，自动销毁活动对象
    使用匿名函数的好处：
        1.隔离作用域，避免作用域污染
        2.由于活动对象在函数调用后被销毁，所以更加节省内存空间
    匿名函数的常用种类：
        1.自执行函数
        2.回调函数

事件和函数：
    函数可以被事件触发所执行(事件可以调用函数)

鼠标事件：
    (1)onclick 左键单击
    (2)ondblclick 左键双击
    (3)onmouseover 鼠标悬停
    (4)onmouseout 鼠标移出
    (5)onmouseenter 鼠标进入
    (6)onmouseleave 鼠标离开
    (7)onmousemove 鼠标移动
    (8)onmousedown 鼠标按下
    (9)onmouseup 鼠标弹起
    (10)oncontextmenu 右键点击

键盘事件：
    (1)onkeydown 键盘按下(任意按键触发)
    (2)onkeypress 键盘按下(只有字符按键才能触发，功能键无效)
    (3)onkeyup 按键弹起

表单事件：
    (1)onsubmit 表单提交事件，该事件的对象为form
    (2)onfocus 输入框获得焦点
    (3)onblur 输入框失去焦点
    (4)oninput 输入框输入事件
    (5)onchange 输入框改变事件
        需要两个条件才能触发：
            1.输入框内的内容发生改变
            2.失去焦点

对象的创建：
    (1)使用构造函数创建对象
    (2)使用直接量进行赋值创建对象{}
        对象有属性(数据)和方法(功能)组成，且是无序的
        对象以键值对的方式存在，属性名和属性值之间使用:进行连接，键值对之间使用,隔开
        使用{}进行创建对象时，也被叫成json格式

对象的转换：
    对象的属性名默认为字符串类型
    (1)对象转为字符串：JSON.stringify(obj);
    (2)字符串转为对象：JSON.parse(str);
    对象中只要是字符串，都用引号引起来

对象的操作：
    属性访问：使用.操作符和[]访问，属性可以是任意值
    属性删除：使用delete关键字，不可枚举的属性不可以删除

数据结构：
    (1)数组
        特点：
            数据通过下标进行访问，所以为有序数列
            将多个值赋值给一个变量
            数组中的数据可以使任意类型，可以使重复值
            最小的索引为0，最大的索引为length-1
        创建：
            构造函数进行创建：
                var arr = new Array(x); x为数组的长度
            直接量赋值创建：
                var arr = [];
        访问：
            使用[i]进行访问对应的数据
            数据不存在则返回undefined
        清空：
            arr.length = 0; 将长度进行清空
            !!! arr = []; 不要使用空数组进行覆盖
        分类：
            1. 索引数组
                通过索引值访问数组中的成员
            2. 关联数组
                通过key访问数组中的成员，因为没有顺序，所以不记录到length中

数据类型：
    (1)基本类型
        Undefined Null Number String Boolean
    (2)引用类型(数据类型均为对象)
        Object Function Array
        引用类型赋值的是数据地址，并不是元数据
        引用类型数据比较的是地址，地址相同则为true

基本包装类型：
    Boolean String Number
    将基本类型的数据包装成对象，使其可以拥有对象和方法
    当基本数据类型在使用某些方法时，会自动包装成对象

引用数据类型检测：
    (1)typeof 用于检测基本类型的数据，无法检测引用类型的数据
    (2)instanceof [xx instanceof xx]; 返回 true / false 准确率不高
    (3)constructor 对象的一个属性，可以用于判断
        [o.constructor === xxx]; 返回 true / false
        但是这个方法无法检测undefined和null
    (4)自定义函数进行数据类型检测
        Object.prototype.toString.call(o).slice(8,-1)

null：
    表示一个变量将来会指向某个对象，但是目前什么都没有指向
    作用：释放引用 初始化对象
    JS引擎中有一个垃圾回收机制，当堆中的数据没有引用时，会自动销毁数据
    当一个引用类型的数据不再需要使用时就将其赋值为null，可以释放内存进行性能优化

for循环和for...in...循环
    for循环应用于索引数组的遍历
    for...in...应用于对象的遍历，且只能遍历可枚举的属性

关键字in：
    单独使用，判断对象中有没有某个属性，返回布尔值

数组API：
    (1)Array.prototype.push()
        描述：将一个或多个元素添加到数组的末尾
        注意：直接修改原数组
        返回值：新数组的长度

    (2)Array.prototype.pop()
        描述：删除数组中的最后一个元素
        注意：直接修改原数组
        返回值：被删除的元素

    (3)Array.prototype.concat()
        描述：用于合并两个或者多个数组
        注意：如果参数为一个数组，会自动进行展开，但是只展开第一层
        返回值：拼接完成之后的新数组

    (4)Array.prototype.join()
        描述：将数组中的所有元素使用指定的拼接符进行拼接
        注意：方法会调用toString()的方法将每个元素都转成字符串，然后进行拼接
        返回值：拼接完成后的新字符串

    (5)Array.prototype.reverse()
        描述：将数组中所有的元素进行颠倒顺序
        注意：直接修改原数组
        返回值：修改后的原数组

    (6)Array.prototype.shift()
        描述：将数组中的第一个元素进行删除
        注意：直接修改原数组
        返回值：被删除的元素

    (7)Array.prototype.sort()
        描述：用于数组的排序
        语法：arr.sort(callback)
        注意：直接修改原数组
        排序方法：
            1. 没有参数
            将每一个元素转成字符串类型，按照unicode编码进行排序
            2. return a-b
            升序排列
            3. return b-a
            降序排列
            4. 乱序排列
            5. 倒序排列 -1
        返回值：重新排序完成的新数组
    
    (8)Array.prototype.slice()
        描述：在数组中截取一个片段
        注意：包含开头，不包含结尾，参数可以是负数，不改变原数组
        返回值：截取到的数组片段

    (9)Array.prototype.toString()
        描述：将数组中的所有元素都进行toString()，然后使用,拼接
        注意：推荐使用join()
        返回值：拼接完成后的新字符串

    (10)Array.prototype.unshift()
        描述：将一个或多个值依次添加到数组的头部
        注意：原有值会依次向后移动，且改变原数组
        返回值：新数组的长度

    (11)Array.prototype.splice()
        描述：
            1.可以从指定的索引处删除元素
            2.可以在指定的索引位置插入元素
            3.可以替换数组中的元素
        注意：直接修改原数组
        返回值：被删除元素组成的新数组，如果没有删除的元素则返回一个空数组
    
    (12)Array.prototype.indexOf()
        描述：在数组中查找指定的元素，返回第一个匹配的下标，否则返回-1
        注意：只匹配第一个相同的值，可以指定开始的坐标
        返回值：下标或者-1

    (13)Array.prototype.forEach()
        参数：callback
        描述：为每一个数组中每一个值执行一次回调函数
        返回值：undefined

    (14)Array.prototype.filter()
        参数：callback 需要return
        描述：检测数组中的元素是否符合逻辑表达式
        返回值：符合条件的元素组成的新数组

    (15)Array.prototype.map()
        参数：callback
        描述：遍历数组，为数组中的每一个元素执行一次回调函数
        注意：直接修改原数组
        返回值：修改后的原数组

    (16)Array.prototype.reduce()
        参数：prev,next
        描述：进行归并或者统计操作
        返回值：归并或者统计的结果

    (17)Array.prototype.every()
        参数：callback
        描述：提供一个逻辑表达式，每一个元素都满足，则返回true
        注意：必须要每一个元素都满足条件
        返回值：布尔值

    (18)Array.prototype.some()
        参数：callback
        描述：提供一个逻辑表达式，只要有一个值满足，则返回true
        注意：只要有一个元素满足条件即可
        返回值：布尔值

    (19)Array.prototype.find()
        参数：callback
        描述：提供一个逻辑表达式，返回数组中第一个满足这个表达式的值
        注意：没有元素满足则返回undefined
        返回值：值 / Undefined

    (20)Array.prototype.findIndex()
        参数：callback
        描述：返回满足逻辑表达式的第一个值的下标
        注意：若没有值满足，则返回-1
        返回值：索引 / -1

字符串API：
    (1)String.prototype.charAt()
        参数：index(Number) 索引
        注意：和arr[index]用法相同
        返回值：索引对应的字符 / Undefined

    (2)String.prototype.charCodeAt()
        参数：index(Number) 索引
        返回值：索引对应的字符的unicode / NaN
    
    (3)String.fromCharCode()
        参数：unicode
        返回值：unicode对应的字符

    (4)String.prototype.concat()
        描述：将传入的值与现有的字符串进行拼接
        注意：与+号的用处相同
        返回值：拼接完的字符串

    (5)String.prototype.indexOf()
        描述：在字符串中查找指定的内容，有的话返回第一个字符的索引，没有的话返回-1
        参数：
            searchString 需要查找的字符串
            fromIndex 从指定的下标开始查询
        返回值：索引 / -1

    (6)String.prototype.laseIndexOf()
        描述：从后往前查找指定字符串，索引值还是从前往后
        参数：
            searchString 需要查找的字符串
            fromIndex 从指定的下标开始查询
        返回值：索引 / -1
    
    (7)String.prototype.slice()
        描述：截取[start,end)字符串片段
        参数：
            start(number) 开始索引
            end(number) 结束索引
        注意：
            不修改原字符串
            参数允许是负数
        返回值：新生成的字符串

    (8)String.prototype.split()
        描述：使用指定的分隔符进行字符串切割
        参数：sep 分隔符
        注意：这是join的逆向操作
        返回值：新数组

    (9)String.prototype.substr()
        描述：在字符串中进行字符串切割
        参数：
            start 开始索引
            length 长度
        注意：
            不写开始则截取一整个字符串
            不写长度则默认切割到最后
        返回值：新字符串

    (10)String.prototype.substring()
        参数：
            from 开始索引
            to 结束索引
        描述：截取[from,to)字符串
        注意：不建议使用该方法，使用slice

    (11)String.prototype.replace()
        参数：
            regexp 正则表达式
            string 需要替换的文本内容
        描述：用心的字符串替换匹配的文本内容
        返回值：替换后的新字符串

Math对象：
    注意：没有构造函数，不能进行实例化
    方法：
        Math.abs()
        Math.ceil()
        Math.log(2)
        Math.floor()
        Math.max() / Math.max(...arr)
        Math.min() / Math.min(...arr)
        Math.pow()
        Math.round()
        Math.sqrt()
        Math.sin()
        Math.cos()
        Math.tan()

Date对象：
    注意：Date有构造函数
    var d = new Date() 创建一个标准时间对象，不传参数默认为当前时间
    (y,m,d,h,m,s)
    (y,m,d h:m:s)
    d.getFullYear() 获得年份
    d.getMonth() 获得月份 取值范围(0-11)
    d.getDate() 获得日期 取值范围(1-31)
    d.getHours() 获得小时
    d.getMinutes() 获得分钟
    d.getSeconds() 获得秒
    d.getDay() 获得星期
    d.getMilliseconds() 获得毫秒
    d.getTime() 获得当前时间的时间戳
    创建时间戳的快捷方式：
        Date.now()

周期性计时器：
    setInterval(callback,delay)
    参数：
        callback 回调函数
        delay 间隔时间
    返回值：id(Number) 执行函数的间隔时间 毫秒

    关闭周期性计时器：
        clearInterval(id)

一次性计时器：
    setTimeout(callback,delay)
    参数：
        callback
        delay
    返回值：id(Number) 计时器编号

    关闭一次性计时器：
        clearTimeout(id)

BOM：
    没有标准，厂商自定义BOM对象

window：
    BOM的根对象
    浏览器环境下，JS的全局对象
    每建立一个浏览器窗口，就会创建一个window对象
    浏览器中级别最高的对象
    访问window的子属性或者方法可以省略 window.
    window的所有成员都是全局对象
    this在全局环境下指向window
    this在函数中指向它的对象

全局属性：
    length 框架数量 已经废弃
    name 字符串类型，在定义变量的时候要记得规避
    如果不确定变量是否存在，在属性前面加上下划线
    innerHeight 显示区域的高度
    innerWidth 显示区域的宽度
    outerHeight 浏览器窗口高度
    outerWidth 浏览器窗口宽度

全局方法：
    confirm
    alert
    prompt

JS引擎运行原理：
    JS引擎是一个单线程环境，所以JS可以看作为单线程执行
    计时器是一个需要等待的操作，叫做阻塞操作
    一旦出现阻塞操作，就会被主线程踢出，踢到事件队列
    当主线程执行完成后，开始执行事件队列
    这些操作又称为异步操作

navigator：
    用于判断用户使用的是什么浏览器
    userAgent

location:
    location.href 获取或设置URL地址
    location.hash 获取URL中的锚点部分
    location.host 获取主机名和端口号
    location.pathname 设置或返回路径 第一个斜杠开始到文件名结束
    location.hostname 主机名
    location.port 端口号
    location.protocol 协议

SPA：
    使用hash的值进行判断，分别显示对应的内容

location.search：
    获取URL从问号开始的信息
    search的数据可以在多页面中进行传递
    对search的数据进行分割处理，分别进行应用

上下层节点之间的关系：
    parentNode 父级节点
    childNodes 所有子节点 类数组
    firstChild 获得第一个子节点
    lastChild 获得最后一个子节点
    firstElementChild 获得第一个子元素节点
    lastElementChild 获得最后一个子元素节点
    children 所有子元素 类数组对象

平行节点：
    previousSibling 上一个兄弟节点
    nextSibling 下一个兄弟节点
    previousElementSibling 上一个兄弟元素
    nextElementSibling 下一个兄弟元素

节点名称：
    nodeName 只读属性：string
        元素节点 tagName，所有名称都大写
        文本节点 #text
        注释节点 #comment
        文档节点 #document
        属性节点 属性名
        文档声明 html

节点类型：
    nodeType 数据类型 number
        元素节点 1
        属性节点 2
        文本节点 3
        注释节点 8
        文档节点 9
        文档声明 10

文本内容：
    innerHTML 获取全部内容，包括标签，但是不获取格式
    innerText 不获取标签，获取格式
    textContent 不获取标签，也不获取格式

属性集合：
    元素节点的 attributes 属性
    是一个类数组对象
    attributes[index] / attributes[attr] 获得属性节点
    每一个属性节点都是一个单独的对象
    xxx.nodeName / nodeType / nodeValue
    转数组的方式：
        ES6
        1.var arr = [...box.attributes];
        兼容低版本ie
        2.var arr = [].slice.call(box.attributes);

获得元素的属性值：
    1.element.attributes[index].value
    2.element.attributes["attr"].value
    3.element.getAttributeNode("attr").value
    4.element.getAttribute("attr"); 推荐使用

设置元素的属性值：
    1.element.setAttribute(name,value); 推荐使用
    将某个元素的属性值赋给另一个元素
    xx1.setAttribute(xx2.attributes[i].nodeName,xx2,attributes[i].nodeValue)
    2.element.setAttributeNode(attrNode);

移除属性：
    1.element.removeAttribute(attrName);
    2.element.removeAttributeNode(attrNode);

判断属性是否还存在：
    element.hasAttribute(attrname);

类名的操作：
    addClass(box, 'red')
    removeClass(box, 'red')
    HTML5:
        xxx.classList.add('red')
        xxx.classList.remove('red')
        xxx.classList.replace('red', 'green')

元素的选取：
    1.通过标签名选择元素
        node.getElementsByTagName()
        类数组对象
    2.通过name获取元素，一般为表单元素
        node.getElementsByName()
        类数组对象
    3.通过元素类名获取元素
        node.getElementsByClassName()
        类数组对象
    4.通过CSS选择器选择第一个匹配到的元素
        node.querySelector(selector);
    5.通过CSS选择器选择所有匹配的元素
        node.querySelectorAll(selector);
            a[href^="https://news"]
            a[href*="baidu.com"]
            .list1>li:nth-child(odd)
    6.特别选取
        都只存在一个
        1.document.documentElement
        2.document.body
        3.document.head

元素的创建：
    document.createElement(tagName)

元素的插入：
    parentNode.appendChild(childNode)
    在父元素的结尾插入一个元素
    parentNode.insertBefore(newChild, oldChild)
    在父元素的节点的某个子节点前面插入

删除元素：
    在父元素中删除子节点
        1.parentNode.removeChild(childNode)
            返回被删除的元素
        2.删除指定的DOM元素，没有返回值
            DOMElement.remove()

替换节点：
    使用新节点替换旧节点
    parentNode.replaceChild(newChild, oldChild)

移动元素：
    将需要移动的元素进行删除返回至一个新的变量，再将这个变量进行添加

HTML DOM操作：
    适用于属性的访问和修改

CSS属性：
    获取元素宽高：
        offsetWidth / offsetHeight
        根据盒模型区分最后获得的属性值
        border-box：
            大小 = 宽高
        content-box：
            大小 = 宽高 + 内填充 + 边框
    获取元素定位值：
        offsetTop / offsetLeft
        如果元素的定位值是static 根据body 0 0 计算
        如果父级元素设置了定位 根据父元素的 0 0 计算
        margin 会影响定位值的大小
        定位值是从边框进行计算

行内样式：
    box.style 获取样式集合
    box.style.cssText 获取行内样式文本
    遍历样式，获得所有属性：
        for(var i=0; i<box.style.length; i++){
            console.log(box.style[i]);
            console.log(box.style[box.style[i]]);
        }
    获得单个行内样式：
        console.log(box.style.color);
    修改单个行内样式：
        box.style.color = 'yellow'
    当某个属性名为多单词的时候，使用驼峰命名法

计算后样式：
    getComputedStyle(elm)[style] 标准浏览器
    elm.currentStyle[style] ie浏览器(ie9以下)

table对象：
    display:table-cell
    vertical-align:middle
        使用table-cell的时候，元素不能浮动，会转成block
        如果一定要浮动，则再套一层父元素
    table.rows 获得所有行 是一个类数组对象
    table.rows[i].cells 获得单元格合集
    table.rows[i].rowIndex 返回当前行在表格中的索引
    table.rows[i].cells[i].cellIndex 返回单元格的索引

innerHTML的注意点：
    如果进行整体替换，会导致原有赋值函数失效

在HTML结构中添加事件：
    <div onclick = "fn()"></div> 不建议使用

DOM0级事件：
    将一个事件处理函数赋值给一个事件处理属性
    也叫作事件绑定，一次只能绑定一个事件
    当存在多次事件绑定时，以最后一次事件绑定为准
    移除事件只需要将事件处理属性赋值为null即可

DOM2级事件：
    高版本浏览器：
    添加：
        elm.addEventListener(eventType,callback[,bool])
        参数：
            eventType：string类型，事件类型，不加on
            callback：function 事件处理函数
            bool：冒泡(false) / 捕获(true)
        DOM2级时间处理函数可以理解为同一个元素的同一个事件添加多个事件处理函数
        多个事件处理函数的执行顺序和添加顺序相同
    移除：
        elm.removeEventListener(eventType,callback)
        参数：
            eventType：string 事件类型
            callback：function 事件处理函数
        arguments.callee 指向当前函数
    IE：
    添加：
        elm.attachEvent(eventType,callback);
    移出：
        elm.detachEvent(eventType,callback);
    注意：IE中需要在事件名称前面加上on

事件监听兼容性处理：
    使用if进行方法条件判断

惰性函数：
    函数在进行条件判断以后，对函数进行重写

事件处理周期(事件流)：
    DOM中事件处理周期分为三个阶段：
        1.事件捕获
        从最不具体的事物到最具体的事物
        事件沿着DOM树向下传播
        2.目标触发
        运行事件处理函数
        3.事件冒泡
        从最具体的事物到最不具体的事物
        事件沿着DOM树向上传播
    标准浏览器可以选择捕获或者冒泡：
        DOM2级事件监听
            addEventListener(type,fn[,boolean=false])
            在浏览器中事件默认为冒泡 false

阻止事件冒泡：
    标准DOM方法：
        ev.stopPropagation()
    兼容IE写法：
        var ev = event;
        ev.cancelBubble = true;
    所有的事件 在事件处理函数中的第一个参数都是事件对象

事件委托：
    将事件处理函数添加给事件目标的父级或者祖先级元素
    通过事件冒泡原理并判断事件的目标对象为目标添加事件

event对象：
    每一个事件都会有一个对应的event对象，用于事件信息记录
    它会作为事件处理函数的第一个参数自动注入到函数中

使用事件委托的好处：
    1.减少DOM的查找次数
    2.减少事件的添加(绑定)次数
    3.可以为未来元素添加事件

事件中的目标：
    标准浏览器：
        ev.target
    IE浏览器：
        ev.srcElement

鼠标事件的常用属性：
    ev 对象的常用属性
    type 事件类型
    target 事件目标(事件源)

鼠标事件坐标：
    clientX,clientY
        浏览器显示区域的左上角
    pageX,pageY
        页面显示的区域的左上角
    layerX,layerY
        同上，兼容火狐
    offsetX,offsetY
        元素的左上角
    screenX,screenY
        屏幕的左上角

键盘事件：
    判断用户按键行为，给document添加keyup事件
    ev.keyCode 键盘的按键编码 ASKII编码
    ev.which 按键编码
    组合键：
        ctrlKey
        altKey
        shiftKey

鼠标右键事件：
    oncontextmenu

阻止事件默认行为：
    ev.preventDefault() 标准DOM方法
    ev.returnValue = false IE兼容写法
    return false 不是标准写法，不推荐

就绪事件：
    DOMcontentLoaded DOM结构加载完毕(HTML5)

滚轮事件：
    mousewheel       chrome / ie
        ev.wheelDelta > 0 向上滚动
        ev.wheelDelta < 0 向下滚动
    DOMMouseScroll   FireFox
        ev.detail < 0 向上滚动
        ev.detail > 0 向下滚动

正则表达式：
    1.使用构造函数创建
        var reg = new RegExp("abc");
    2.使用直接量进行创建
        var reg2 = /abc/;
    
正则表达式需要转译字符：
    . \ / * ? + [ ] ( ) { } ^ | $

正则表达式字符集：
    字符集 [ ]
    [ ] 表示匹配单个字符
    ^ 在字符集中表示非
    [abc] 匹配abc中任意一个字符
    [abc][ac] 匹配两个字符 第一个是abc中任意一个 第二个是ac中任意一个
    [^abc] 表示不匹配abc中任意一个
    [0-9] 表示匹配一个0-9的数字
    [^1-3] 表示不匹配1-3
    [a-z] 表示匹配小写字母a-z
    [A-Z] 表示匹配大写字母A-Z
    [A-Za-z] 表示匹配大小写字母
    [A-Za-z0-9] 表示匹配字母和数字
    [A-z] 表示匹配大写字母A-小写字母z中间所有 askii编码的字符( [ \ ` _ ^ ] )
    [A-Za-z0-9_] 匹配数字字母下划线

正则表达式预定义字符集：
    \d 匹配一个数字 等同于[0-9]
    \D 匹配一个非数字
    \w 匹配数字字母下划线 [A-Za-z0-9_]
    \W 匹配非数字字母下划线
    \s 匹配空白符(空格 制表符)
    \S 匹配非空白符
    .  表示匹配除回车换行(\r\n)外的任意字符

匹配数量：
    n? 表示匹配字符0次或1次
    n* 表示匹配字符0次或多次
    n+ 表示匹配字符1次或多次
    n{x} 表示匹配字符x次
    n{x,y} 表示匹配字符x至y次
    n{x,} 表示匹配字符至少x次

正则表达式的边界：
    ^ 表示匹配边界开始
    $ 表示匹配边界结束
    \b 匹配单词边界
    \B 匹配非单词边界
    ?=x 表示之后紧跟x的字符串(不包含x)
    ?!x 表示之后没有紧跟的x字符串
    ?:n 表示之后紧跟x的字符串(包含x)

正则表达式选择分组：
    | 在正则表达式中表示选择 相当于逻辑或
    () 一个小括号表示一个整体，分配一个分组编号

正则表达式API：
    (1)RegExp.prototype.test(string)
        描述：通过正则表达式验证字符串是否符合标准
        返回值：布尔值

    (2)String.prototype.match(regexp)
        语法：str.match(regexp)
        描述：查找匹配正则表达式的内容，返回一个数组
        注意：返回数组的长度，取决于正则表达式是否有全局属性
        返回值：数组，包含正则表达式的文本内容，否则null
    
    (3)String.prototype.search(regexp)
        语法：str.search(regexp)
        描述：查找匹配的第一个文本内容并返回索引值
        注意点：没有匹配到则返回-1
        返回值：索引值
        
    (4)String.prototype.replace(regexp,string)
        语法：str.replace(regexp,string)
        描述：使用正则表达式匹配字符串中的内容，进行替换
        注意：
        返回值：替换后的新字符串

    (5)RegExp.prototype.exec(string)
        语法：reg.exec(string)
        描述：exec()方法在一个指定字符串中执行一个搜索匹配，返回一个数组或null
        返回值：数组或null

去除前后空格函数：
    String.prototype.trim();
    但是这个函数有兼容问题，需要进行兼容判断*****

文本采集，主要是用于防范恶意攻击
    (1)替换
    (2)混淆 / 转义 &lt; &gt;

正则表达式的分组编号：
    str = 'abc123'
    /([a-z]+)([0-9]+)/
    RegExp.$1 = abc;
    RegExp.$2 = 123;
    str.replace(/([a-z]+)([0-9]+)/,"$2$1")
        字符串快速倒序
        在使用该方法时，正则的顺序必须要匹配

严格模式：
    "use strict"
    (1)严格模式必须写在作用域的顶部，前面只能有注释
    (2)变量必须先声明再使用
    (3)严格模式下，全局函数的this不再指向window
    (4)严格模式下，eval有独立的作用域

Function.prototype.bind()
    语法：
        fn.bind(thisObj[,arg1...,argN])
    参数：
        thisObj：this需要指向的新对象
        arg：需要绑定给新函数的实参
    返回值：一个新函数！！！
    注意：
        bind可以为函数绑固定的实际参数
        绑定参数后，后续外部传入的参数会进行顺延
    应用场景：
        需要保存this指针的地方都可以使用
    
let和const：
    let 定义变量
    const 定义常量 引用类型中的值可以进行改变

结构赋值：
    左右对等的模式匹配，结构相等，自动拆解进行赋值
    解构不成功时自动定义为undefined
    解构允许设置默认值

对象的解构：
    对象是无序的，解构时必须使用对象的属性名

字符串结构：
    跟数组解构一致

模板字符串：
    `xxxxxxx${}xxxx${}xxxxxxxx`

Symbol:
    Symbol没有构造函数，不能使用new进行创建实例
    Symbol用于解决对象的命名冲突问题
    let s = Symbol['username'];
    obj[s] = "lisi";
    使用Symbol类型时不能使用点操作符
    console.log(obj[s]);

箭头函数：
    函数语法糖
    适用于只有一个参数(省略小括号)，且只有一条返回语句(省略大括号)
    通常适用于回调函数和匿名函数
    箭头函数中不能使用arguments属性
    箭头函数不能作为Generator函数
    箭头函数不能在事件中使用
    let fn = function(a){
        return a + 2;
    }
    let fn = a => a + 2;

箭头函数的this：
    this的指向在声明的时候被决定，上下文有具体的函数指向，那句集成父函数的this指向，不然就指向window

set结构：
    set是一种类似数组的数据结构，值唯一，不允许重复
    可以通过set构造函数创建set结构
    set主要用于数组的去重
    将类数组转为数组：
        Array.from()
        [...arrayLike]
        [].slice.call(arrayLike)

Set的API：
    Set.prototype.add()
        用于向set结构中添加元素
        set的add方法支持链式调用
        set.add(1).add(2).add(3)

    Set.prototype.size
        获得set结构的长度
        set结构没有length属性
    
    Set.prototype.delete(value)
        删除set中的元素，并返回一个布尔值

    Set.prototype.has(value)
        判断set中是否存在value，返回一个布尔值

    Set.prototype.clear()
        清空set结构，删除所有元素

Map结构：
    Map是一种hash结构，是值和值的对应，key可以是任意类型
    对象是字符串和值的对应
    Map.prototype.set(key,value)
        设置键值对
    
    Map.prototype.get(key)
        通过key获得值

    Map.prototype.has(key)
        通过key判断键值对是否存在

    Map.prototype.delete(key)
        通过key删除一个键值对

    Map.prototype.clear()
        清空Map

for-of：
    es6新增的一种遍历方法，遍历Iterator接口所支持的数据结构
    for-in 和 for-of 都可以用于遍历数组
        for-in 遍历的是 key
        for-of 遍历的是 value
    for(let key in arr){
        console.log(arr[key]);
    }
    for(let value of arr){
        console.log(value);
    }
    用于结构Map：
        for(var [key,value] of Map){
            console.log(key,value);
        }
    数组，类数组，字符串，set，map，nodelist，arguments

Generator：
    ES6新增的一种函数用法
        遍历器对象
        用于解决异步操作的问题
        让异步代码同步化执行
        Generator一般不会单独使用，一般配合node.js的co函数库使用
        co.js库函数提供了一个遍历器函数会自动调用Generator
    在函数关键字和函数名中间添加一个*，函数就会变成Generator
    调用Generator会获得一个遍历器对象
    Generator会将一个函数分成多次执行
    在Generator中会配合yield语句使用
    每一次调用遍历器对象的next方法会获得一个返回的结果(value,done)
    这个结果包含了本次Generator产生的值和一个done属性，表示是否已完成遍历
    一般最后一次使用return关键字表示遍历结束并产生结果
    使用while循环进行分步执行：
        while(result = gen.next()){
            console.log(result.value);
            if(result.done) break;
        }