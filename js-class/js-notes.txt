鼠标事件：
    (1)onclick 左键单击
    (2)ondblclick 左键双击
    (3)onmouseover 鼠标悬停
    (4)onmouseout 鼠标移出
    (5)onmouseenter 鼠标进入
    (6)onmouseleave 鼠标离开
    (7)onmousemove 鼠标移动
    (8)onmousedown 鼠标按下
    (9)onmouseup 鼠标弹起
    (10)oncontextmenu 右键点击

键盘事件：
    (1)onkeydown 键盘按下(任意按键触发)
    (2)onkeypress 键盘按下(只有字符按键才能触发，功能键无效)
    (3)onkeyup 按键弹起

表单事件：
    (1)onsubmit 表单提交事件，该事件的对象为form
    (2)onfocus 输入框获得焦点
    (3)onblur 输入框失去焦点
    (4)oninput 输入框输入事件
    (5)onchange 输入框改变事件
        需要两个条件才能触发：
            1.输入框内的内容发生改变
            2.失去焦点

对象的创建：
    (1)使用构造函数创建对象
    (2)使用直接量进行赋值创建对象{}
        对象有属性(数据)和方法(功能)组成，且是无序的
        对象以键值对的方式存在，属性名和属性值之间使用:进行连接，键值对之间使用,隔开
        使用{}进行创建对象时，也被叫成json格式

对象的转换：
    对象的属性名默认为字符串类型
    (1)对象转为字符串：JSON.stringify(obj);
    (2)字符串转为对象：JSON.parse(str);
    对象中只要是字符串，都用引号引起来

对象的操作：
    属性访问：使用.操作符和[]访问，属性可以是任意值
    属性删除：使用delete关键字，不可枚举的属性不可以删除

数据结构：
    (1)数组
        特点：
            数据通过下标进行访问，所以为有序数列
            将多个值赋值给一个变量
            数组中的数据可以使任意类型，可以使重复值
            最小的索引为0，最大的索引为length-1
        创建：
            构造函数进行创建：
                var arr = new Array(x); x为数组的长度
            直接量赋值创建：
                var arr = [];
        访问：
            使用[i]进行访问对应的数据
            数据不存在则返回undefined
        清空：
            arr.length = 0; 将长度进行清空
            !!! arr = []; 不要使用空数组进行覆盖
        分类：
            1. 索引数组
                通过索引值访问数组中的成员
            2. 关联数组
                通过key访问数组中的成员，因为没有顺序，所以不记录到length中

数据类型：
    (1)基本类型
        Undefined Null Number String Boolean
    (2)引用类型(数据类型均为对象)
        Object Function Array
        引用类型赋值的是数据地址，并不是元数据
        引用类型数据比较的是地址，地址相同则为true

基本包装类型：
    Boolean String Number
    将基本类型的数据包装成对象，使其可以拥有对象和方法
    当基本数据类型在使用某些方法时，会自动包装成对象

引用数据类型检测：
    (1)typeof 用于检测基本类型的数据，无法检测引用类型的数据
    (2)instanceof [xx instanceof xx]; 返回 true / false 准确率不高
    (3)constructor 对象的一个属性，可以用于判断
        [o.constructor === xxx]; 返回 true / false
        但是这个方法无法检测undefined和null
    (4)自定义函数进行数据类型检测
        Object.prototype.toString.call(o).slice(8,-1)

null：
    表示一个变量将来会指向某个对象，但是目前什么都没有指向
    作用：释放引用 初始化对象
    JS引擎中有一个垃圾回收机制，当堆中的数据没有引用时，会自动销毁数据
    当一个引用类型的数据不再需要使用时就将其赋值为null，可以释放内存进行性能优化

for循环和for...in...循环
    for循环应用于索引数组的遍历
    for...in...应用于对象的遍历，且只能遍历可枚举的属性

关键字in：
    单独使用，判断对象中有没有某个属性，返回布尔值

数组API：
    (1)Array.prototype.push()
        描述：将一个或多个元素添加到数组的末尾
        注意：直接修改原数组
        返回值：新数组的长度

    (2)Array.prototype.pop()
        描述：删除数组中的最后一个元素
        注意：直接修改原数组
        返回值：被删除的元素

    (3)Array.prototype.concat()
        描述：用于合并两个或者多个数组
        注意：如果参数为一个数组，会自动进行展开，但是只展开第一层
        返回值：拼接完成之后的新数组

    (4)Array.prototype.join()
        描述：将数组中的所有元素使用指定的拼接符进行拼接
        注意：方法会调用toString()的方法将每个元素都转成字符串，然后进行拼接
        返回值：拼接完成后的新字符串

    (5)Array.prototype.reverse()
        描述：将数组中所有的元素进行颠倒顺序
        注意：直接修改原数组
        返回值：修改后的原数组

    (6)Array.prototype.shift()
        描述：将数组中的第一个元素进行删除
        注意：直接修改原数组
        返回值：被删除的元素

    (7)Array.prototype.sort()
        描述：用于数组的排序
        语法：arr.sort(callback)
        注意：直接修改原数组
        排序方法：
            1. 没有参数
            将每一个元素转成字符串类型，按照unicode编码进行排序
            2. return a-b
            升序排列
            3. return b-a
            降序排列
            4. 乱序排列
            5. 倒序排列 -1
        返回值：重新排序完成的新数组
    
    (8)Array.prototype.slice()
        描述：在数组中截取一个片段
        注意：包含开头，不包含结尾，参数可以是负数
        返回值：截取到的数组片段

    (9)Array.prototype.toString()
        描述：将数组中的所有元素都进行toString()，然后使用,拼接
        注意：推荐使用join()
        返回值：拼接完成后的新字符串

    (10)Array.prototype.unshift()
        描述：将一个或多个值依次添加到数组的头部
        注意：原有值会依次向后移动，且改变原数组
        返回值：新数组的长度

    (11)Array.prototype.splice()
        描述：
            1.可以从指定的索引处删除元素
            2.可以在指定的索引位置插入元素
            3.可以替换数组中的元素
        注意：直接修改原数组
        返回值：被删除元素组成的新数组，如果没有删除的元素则返回一个空数组
    
    (12)Array.prototype.indexOf()
        描述：在数组中查找指定的元素，返回第一个匹配的下标，否则返回-1
        注意：只匹配第一个相同的值，可以指定开始的坐标
        返回值：下标或者-1

    (13)Array.prototype.forEach()
        参数：callback
        描述：为每一个数组中每一个值执行一次回调函数
        返回值：undefined

    (14)Array.prototype.filter()
        参数：callback 需要return
        描述：检测数组中的元素是否符合逻辑表达式
        返回值：符合条件的元素组成的新数组

    (15)Array.prototype.map()
        参数：callback
        描述：遍历数组，为数组中的每一个元素执行一次回调函数
        注意：直接修改原数组
        返回值：修改后的原数组

    (16)Array.prototype.reduce()
        参数：prev,next
        描述：进行归并或者统计操作
        返回值：归并或者统计的结果

    (17)Array.prototype.every()
        参数：callback
        描述：提供一个逻辑表达式，每一个元素都满足，则返回true
        注意：必须要每一个元素都满足条件
        返回值：布尔值

    (18)Array.prototype.some()
        参数：callback
        描述：提供一个逻辑表达式，只要有一个值满足，则返回true
        注意：只要有一个元素满足条件即可
        返回值：布尔值

    (19)Array.prototype.find()
        参数：callback
        描述：提供一个逻辑表达式，返回数组中第一个满足这个表达式的值
        注意：没有元素满足则返回undefined
        返回值：值 / Undefined

    (20)Array.prototype.findIndex()
        参数：callback
        描述：返回满足逻辑表达式的第一个值的下标
        注意：若没有值满足，则返回-1
        返回值：索引 / -1

字符串API：
    (1)String.prototype.charAt()
        参数：index(Number) 索引
        注意：和arr[index]用法相同
        返回值：索引对应的字符 / Undefined

    (2)String.prototype.charCodeAt()
        参数：index(Number) 索引
        返回值：索引对应的字符的unicode / NaN
    
    (3)String.fromCharCode()
        参数：unicode
        返回值：unicode对应的字符

    (4)String.prototype.concat()
        描述：将传入的值与现有的字符串进行拼接
        注意：与+号的用处相同
        返回值：拼接完的字符串

    (5)String.prototype.indexOf()
        描述：在字符串中查找指定的内容，有的话返回第一个字符的索引，没有的话返回-1
        参数：
            searchString 需要查找的字符串
            fromIndex 从指定的下标开始查询
        返回值：索引 / -1

    (6)String.prototype.laseIndexOf()
        描述：从后往前查找指定字符串，索引值还是从前往后
        参数：
            searchString 需要查找的字符串
            fromIndex 从指定的下标开始查询
        返回值：索引 / -1
    
    (7)String.prototype.slice()
        描述：截取[start,end)字符串片段
        参数：
            start(number) 开始索引
            end(number) 结束索引
        注意：
            不修改原字符串
            参数允许是负数
        返回值：新生成的字符串

    (8)String.prototype.split()
        描述：使用指定的分隔符进行字符串切割
        参数：sep 分隔符
        注意：这是join的逆向操作
        返回值：新数组

    (9)String.prototype.substr()
        描述：在字符串中进行字符串切割
        参数：
            start 开始索引
            length 长度
        注意：
            不写开始则截取一整个字符串
            不写长度则默认切割到最后
        返回值：新字符串

    (10)String.prototype.substring()
        参数：
            from 开始索引
            to 结束索引
        描述：截取[from,to)字符串
        注意：不建议使用该方法，使用slice

    (11)String.prototype.replace()
        参数：
            regexp 正则表达式
            string 需要替换的文本内容
        描述：用心的字符串替换匹配的文本内容
        返回值：替换后的新字符串

Math对象：
    注意：没有构造函数，不能进行实例化
    方法：
        Math.abs()
        Math.ceil()
        Math.log(2)
        Math.floor()
        Math.max() / Math.max(...arr)
        Math.min() / Math.min(...arr)
        Math.pow()
        Math.round()
        Math.sqrt()
        Math.sin()
        Math.cos()
        Math.tan()

Date对象：
    注意：Date有构造函数
    var d = new Date() 创建一个标准时间对象，不传参数默认为当前时间
    (y,m,d,h,m,s)
    (y,m,d h:m:s)
    d.getFullYear() 获得年份
    d.getMonth() 获得月份 取值范围(0-11)
    d.getDate() 获得日期 取值范围(1-31)
    d.getHours() 获得小时
    d.getMinutes() 获得分钟
    d.getSeconds() 获得秒
    d.getDay() 获得星期
    d.getMilliseconds() 获得毫秒
    d.getTime() 获得当前时间的时间戳
    创建时间戳的快捷方式：
        Date.now()

周期性计时器：
    setInterval(callback,delay)
    参数：
        callback 回调函数
        delay 间隔时间
    返回值：id(Number) 执行函数的间隔时间 毫秒

    关闭周期性计时器：
        clearInterval(id)

一次性计时器：
    setTimeout(callback,delay)
    参数：
        callback
        delay
    返回值：id(Number) 计时器编号

    关闭一次性计时器：
        clearTimeout(id)

BOM：
    没有标准，厂商自定义BOM对象

window：
    BOM的根对象
    浏览器环境下，JS的全局对象
    每建立一个浏览器窗口，就会创建一个window对象
    浏览器中级别最高的对象
    访问window的子属性或者方法可以省略 window.
    window的所有成员都是全局对象
    this在全局环境下指向window
    this在函数中指向它的对象

全局属性：
    length 框架数量 已经废弃
    name 字符串类型，在定义变量的时候要记得规避
    如果不确定变量是否存在，在属性前面加上下划线
    innerHeight 显示区域的高度
    innerWidth 显示区域的宽度
    outerHeight 浏览器窗口高度
    outerWidth 浏览器窗口宽度

全局方法：
    confirm
    alert
    prompt

JS引擎运行原理：
    JS引擎是一个单线程环境，所以JS可以看作为单线程执行
    计时器是一个需要等待的操作，叫做阻塞操作
    一旦出现阻塞操作，就会被主线程踢出，踢到事件队列
    当主线程执行完成后，开始执行事件队列
    这些操作又称为异步操作

navigator：
    用于判断用户使用的是什么浏览器
    userAgent

location:
    location.href 获取或设置URL地址
    location.hash 获取URL中的锚点部分
    location.host 获取主机名和端口号
    location.pathname 设置或返回路径 第一个斜杠开始到文件名结束
    location.hostname 主机名
    location.port 端口号
    location.protocol 协议

SPA：
    使用hash的值进行判断，分别显示对应的内容

location.search：
    获取URL从问号开始的信息
    search的数据可以在多页面中进行传递
    对search的数据进行分割处理，分别进行应用

上下层节点之间的关系：
    parentNode 父级节点
    childNodes 所有子节点 类数组
    firstChild 获得第一个子节点
    lastChild 获得最后一个子节点
    firstElementChild 获得第一个子元素节点
    lastElementChild 获得最后一个子元素节点
    children 所有子元素 类数组对象

平行节点：
    previousSibling 上一个兄弟节点
    nextSibling 下一个兄弟节点
    previousElementSibling 上一个兄弟元素
    nextElementSibling 下一个兄弟元素

节点名称：
    nodeName 只读属性：string
        元素节点 tagName，所有名称都大写
        文本节点 #text
        注释节点 #comment
        文档节点 #document
        属性节点 属性名
        文档声明 html

节点类型：
    nodeType 数据类型 number
        元素节点 1
        属性节点 2
        文本节点 3
        注释节点 8
        文档节点 9
        文档声明 10

文本内容：
    innerHTML 获取全部内容，包括标签，但是不获取格式
    innerText 不获取标签，获取格式
    textContent 不获取标签，也不获取格式

属性集合：
    元素节点的 attributes 属性
    是一个类数组对象
    attributes[index] / attributes[attr] 获得属性节点
    每一个属性节点都是一个单独的对象
    xxx.nodeName / nodeType / nodeValue
    转数组的方式：
        ES6
        1.var arr = [...box.attributes];
        兼容低版本ie
        2.var arr = [].slice.call(box.attributes);

获得元素的属性值：
    1.element.attributes[index].value
    2.element.attributes["attr"].value
    3.element.getAttributeNode("attr").value
    4.element.getAttribute("attr"); 推荐使用

设置元素的属性值：
    1.element.setAttribute(name,value); 推荐使用
    将某个元素的属性值赋给另一个元素
    xx1.setAttribute(xx2.attributes[i].nodeName,xx2,attributes[i].nodeValue)
    2.element.setAttributeNode(attrNode);

移除属性：
    1.element.removeAttribute(attrName);
    2.element.removeAttributeNode(attrNode);

判断属性是否还存在：
    element.hasAttribute(attrname);

类名的操作：
    addClass(box, 'red')
    removeClass(box, 'red')
    HTML5:
        xxx.classList.add('red')
        xxx.classList.remove('red')
        xxx.classList.replace('red', 'green')

元素的选取：
    1.通过标签名选择元素
        node.getElementsByTagName()
        类数组对象
    2.通过name获取元素，一般为表单元素
        node.getElementsByName()
        类数组对象
    3.通过元素类名获取元素
        node.getElementsByClassName()
        类数组对象
    4.通过CSS选择器选择第一个匹配到的元素
        node.querySelector(selector);
    5.通过CSS选择器选择所有匹配的元素
        node.querySelectorAll(selector);
            a[href^="https://news"]
            a[href*="baidu.com"]
            .list1>li:nth-child(odd)
    6.特别选取
        都只存在一个
        1.document.documentElement
        2.document.body
        3.document.head

元素的创建：
    document.createElement(tagName)

元素的插入：
    parentNode.appendChild(childNode)
    在父元素的结尾插入一个元素
    parentNode.insertBefore(newChild, oldChild)
    在父元素的节点的某个子节点前面插入

删除元素：
    在父元素中删除子节点
        1.parentNode.removeChild(childNode)
            返回被删除的元素
        2.删除指定的DOM元素，没有返回值
            DOMElement.remove()

替换节点：
    使用新节点替换旧节点
    parentNode.replaceChild(newChild, oldChild)

移动元素：
    将需要移动的元素进行删除返回至一个新的变量，再将这个变量进行添加
