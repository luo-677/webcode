鼠标事件：
    (1)onclick 左键单击
    (2)ondblclick 左键双击
    (3)onmouseover 鼠标悬停
    (4)onmouseout 鼠标移出
    (5)onmouseenter 鼠标进入
    (6)onmouseleave 鼠标离开
    (7)onmousemove 鼠标移动
    (8)onmousedown 鼠标按下
    (9)onmouseup 鼠标弹起
    (10)oncontextmenu 右键点击

键盘事件：
    (1)onkeydown 键盘按下(任意按键触发)
    (2)onkeypress 键盘按下(只有字符按键才能触发，功能键无效)
    (3)onkeyup 按键弹起

表单事件：
    (1)onsubmit 表单提交事件，该事件的对象为form
    (2)onfocus 输入框获得焦点
    (3)onblur 输入框失去焦点
    (4)oninput 输入框输入事件
    (5)onchange 输入框改变事件
        需要两个条件才能触发：
            1.输入框内的内容发生改变
            2.失去焦点

对象的创建：
    (1)使用构造函数创建对象
    (2)使用直接量进行赋值创建对象{}
        对象有属性(数据)和方法(功能)组成，且是无序的
        对象以键值对的方式存在，属性名和属性值之间使用:进行连接，键值对之间使用,隔开
        使用{}进行创建对象时，也被叫成json格式

对象的转换：
    对象的属性名默认为字符串类型
    (1)对象转为字符串：JSON.stringify(obj);
    (2)字符串转为对象：JSON.parse(str);
    对象中只要是字符串，都用引号引起来

对象的操作：
    属性访问：使用.操作符和[]访问，属性可以是任意值
    属性删除：使用delete关键字，不可枚举的属性不可以删除

数据结构：
    (1)数组
        特点：
            数据通过下标进行访问，所以为有序数列
            将多个值赋值给一个变量
            数组中的数据可以使任意类型，可以使重复值
            最小的索引为0，最大的索引为length-1
        创建：
            构造函数进行创建：
                var arr = new Array(x); x为数组的长度
            直接量赋值创建：
                var arr = [];
        访问：
            使用[i]进行访问对应的数据
            数据不存在则返回undefined
        清空：
            arr.length = 0; 将长度进行清空
            !!! arr = []; 不要使用空数组进行覆盖
        分类：
            1. 索引数组
                通过索引值访问数组中的成员
            2. 关联数组
                通过key访问数组中的成员，因为没有顺序，所以不记录到length中

数据类型：
    (1)基本类型
        Undefined Null Number String Boolean
    (2)引用类型(数据类型均为对象)
        Object Function Array
        引用类型赋值的是数据地址，并不是元数据
        引用类型数据比较的是地址，地址相同则为true

基本包装类型：
    Boolean String Number
    将基本类型的数据包装成对象，使其可以拥有对象和方法
    当基本数据类型在使用某些方法时，会自动包装成对象

引用数据类型检测：
    (1)typeof 用于检测基本类型的数据，无法检测引用类型的数据
    (2)instanceof [xx instanceof xx]; 返回 true / false 准确率不高
    (3)constructor 对象的一个属性，可以用于判断
        [o.constructor === xxx]; 返回 true / false
        但是这个方法无法检测undefined和null
    (4)自定义函数进行数据类型检测
        Object.prototype.toString.call(o).slice(8,-1)

null：
    表示一个变量将来会指向某个对象，但是目前什么都没有指向
    作用：释放引用 初始化对象
    JS引擎中有一个垃圾回收机制，当堆中的数据没有引用时，会自动销毁数据
    当一个引用类型的数据不再需要使用时就将其赋值为null，可以释放内存进行性能优化

for循环和for...in...循环
    for循环应用于索引数组的遍历
    for...in...应用于对象的遍历，且只能遍历可枚举的属性

关键字in：
    单独使用，判断对象中有没有某个属性，返回布尔值

数组API：
    (1)Array.prototype.push()
        描述：将一个或多个元素添加到数组的末尾
        注意：直接修改原数组
        返回值：新数组的长度

    (2)Array.prototype.pop()
        描述：删除数组中的最后一个元素
        注意：直接修改原数组
        返回值：被删除的元素

    (3)Array.prototype.concat()
        描述：用于合并两个或者多个数组
        注意：如果参数为一个数组，会自动进行展开，但是只展开第一层
        返回值：拼接完成之后的新数组

    (4)Array.prototype.join()
        描述：将数组中的所有元素使用指定的拼接符进行拼接
        注意：方法会调用toString()的方法将每个元素都转成字符串，然后进行拼接
        返回值：拼接完成后的新字符串

    (5)Array.prototype.reverse()
        描述：将数组中所有的元素进行颠倒顺序
        注意：直接修改原数组
        返回值：修改后的原数组

    (6)Array.prototype.shift()
        描述：将数组中的第一个元素进行删除
        注意：直接修改原数组
        返回值：被删除的元素

    (7)Array.prototype.sort()
        描述：用于数组的排序
        语法：arr.sort(callback)
        注意：直接修改原数组
        排序方法：
            1. 没有参数
            将每一个元素转成字符串类型，按照unicode编码进行排序
            2. return a-b
            升序排列
            3. return b-a
            降序排列
            4. 乱序排列
        返回值：重新排序完成的新数组
    
    (8)Array.prototype.slice()
        描述：在数组中截取一个片段
        注意：包含开头，不包含结尾