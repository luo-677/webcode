数组和类数组的区别：
    类数组：
    1.拥有length属性。
    2.不具备数组所拥有的方法。
    3.类数组是一个普通的对象，数组是Array类型

27.模拟select控件，CSS下拉
<head>
    <style>
        html,
        body {
            height: 100%;
            overflow: hidden;
        }
        body,
        div,
        form,
        h2,
        ul,
        li {
            margin: 0;
            padding: 0;
        }
        
        ul {
            list-style-type: none;
        }
        
        body {
            background: #23384e;
            font: 12px/1.5 '微软雅黑';
        }
        
        #search,
        #search form,
        #search .box,
        #search .select,
        #search a {
            background: url(search.jpg) no-repeat;
        }
        
        #search,
        #search .box,
        #search form {
            height: 34px;
        }
        
        #search {
            position: relative;
            width: 350px;
            margin: 10px auto;
        }
        
        #search .box {
            background-position: right 0;
        }
        
        #search form {
            background-repeat: repeat-x;
            background-position: 0 -34px;
            margin: 0 20px 0 40px;
        }
        
        #search .select {
            float: left;
            color: #fff;
            width: 190px;
            height: 22px;
            cursor: pointer;
            margin-top: 4px;
            line-height: 22px;
            padding-left: 10px;
            background-position: 0 -68px;
        }
        
        #search a {
            float: left;
            width: 80px;
            height: 24px;
            color: #333;
            letter-spacing: 4px;
            line-height: 22px;
            text-align: center;
            text-decoration: none;
            background-position: 0 -90px;
            margin: 4px 0 0 10px;
        }
        
        #search a:hover {
            color: #f60;
            background-position: -80px -90px;
        }
        
        #search .sub {
            position: absolute;
            top: 26px;
            left: 40px;
            color: #fff;
            width: 198px;
            background: #2b2b2b;
            border: 1px solid #fff;
            display: none;
        }
        
        #search .sub li {
            height: 25px;
            line-height: 24px;
            cursor: pointer;
            padding-left: 10px;
            margin-bottom: -1px;
            border-bottom: 1px dotted #fff;
        }
        
        #search .sub li:hover {
            background: #8b8b8b;
        }
    </style>
</head>
<body>
    <div id="search">
        <div class="box">
            <form>
                <span id="select" class="select">请选择游戏名称</span>
                <a href="javascript:;">搜索</a>
            </form>
        </div>
        <ul id="sub" class="sub">
            <li>地下城与勇士</li>
            <li>魔兽世界（国服）</li>
            <li>魔兽世界（台服）</li>
            <li>热血江湖</li>
            <li>大话西游II</li>
            <li>QQ幻想世界</li>
        </ul>
    </div>
</body>
<script>
    //1.点击select盒子，显示sub盒子。
    let select = document.querySelector('#select');
    let sub = document.querySelector('#sub');
    let list = sub.children;

    // var select = document.querySelector('#select');
    // var sub = document.querySelector('#sub');
    // var list = sub.children;

    select.onclick = function(ev) {
        var ev = ev || event;
        sub.style.display = 'block';
        ev.stopPropagation(); //取消冒泡。否则列表不会显示出来。
    };

    //2.点击文档其他位置，sub消失。
    document.onclick = function() {
        sub.style.display = 'none';
    }

    //3.所有的li元素添加点击事件，让li里面的内容显示在搜索框内。
    //正好利用li的事件冒泡在我们添加完内容之后，下拉列表消失。
    for (var i = 0; i < list.length; i++) {
        list[i].onclick = function() {
            //this:当前点击的li元素
            select.innerHTML = this.innerHTML; //将li元素的内容给搜索框。
        }
    }
</script>

自定义滚动条：
<script>
    window.onload = function() {
        // 滑块拖拽
        var moveBox = document.querySelector(".movebox");
        var scroll = document.querySelector(".scroll");
        var p = document.querySelector("p");
        var y = null;
        moveBox.onmousedown = function(ev) {
            var offsetY = ev.offsetY;
            document.onmousemove = function(ev) {
                var pageY = ev.pageY;
                y = pageY - offsetY;
                if (y < 0) {
                    y = 0;
                } else if (y > scroll.offsetHeight - moveBox.offsetHeight - 2) {
                    y = scroll.offsetHeight - moveBox.offsetHeight - 2;
                }
                moveBox.style.top = y + "px";
                move();
            }
            document.onmouseup = function() {
                document.onmousemove = null;
            }
        }

        function move() {
            var percent = y / (scroll.offsetHeight - moveBox.offsetHeight - 2);
            var pMove = (p.offsetHeight - scroll.offsetHeight + 2) * percent;
            p.style.top = -pMove + "px";
        }
    }
</script>

todolist:
window.onload = function() {
    // 获取元素
    var title = document.querySelector('#title');
    var todolist = document.querySelector('#todolist');
    var donelist = document.querySelector('#donelist');

    var todocount = document.querySelector('#todocount');
    var donecount = document.querySelector('#donecount');

    var main = document.querySelector('#main');

    // 1. 为输入框绑定事件
    // 由于是判断回车键输入 所以需要使用keyup事件 而不是change事件
    title.onkeyup = function(ev) {
        // String.prototype.trim();
        // 语法: str.trim();
        // 作用: 去除字符串前后空格
        if (ev.keyCode == 13 && this.value.trim()) {
            var li = '<li><input type="checkbox" class="ck"><p>' + this.value + '</p><a class="del">-</a></li>'; //创建新的li元素
            todolist.innerHTML += li; // 将li元素放入todolist
            this.value = ''; // 清空输入框
            count();
        }
    }


    // 2. 为checkbox和删除按钮 添加事件
    // 未来元素 事件委托  将事件委托给 main
    main.onclick = function(ev) {
        switch (ev.target.className) {
            case 'ck':
                if (ev.target.checked) {
                    donelist.appendChild(ev.target.parentNode);
                } else {
                    todolist.appendChild(ev.target.parentNode);
                }
                count();
                break;
            case 'del':
                ev.target.parentNode.remove();
                count();
                break;
        }
    }


    // 3. 计数
    function count() {
        var todo = document.querySelectorAll('#todolist>li');
        var done = document.querySelectorAll('#donelist>li');

        todocount.innerHTML = todo.length;
        donecount.innerHTML = done.length;
    }

}

自定义属性：
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #box::after {
            display: inline;
            content: attr(data-name);
        }
    </style>
    <script>
        // HTML5标准允许用户 对HTML元素的属性进行自定义
        // 用于保存一些需要使用的值

        // 并提供了相关的操作接口
        // HTML5约定 所有的自定义属性 都由  'data-'   前缀开头

        window.onload = function() {
            var btn = document.getElementById('btn');
            var box = document.getElementById('box');

            btn.onclick = function() {
                // 获得自定义属性
                // HTML5提供了JS接口  dataset
                // console.log(box.dataset.name);

                box.dataset.name = '李四';
            }
        }
    </script>
</head>

<body>
    <button id="btn">按钮</button>

    <div id="box" data-name="zhangsan" data-age="20">
        欢迎
    </div>
</body>

大乐透：
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Document</title>
    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }
        
        body {
            text-align: center;
        }
        
        h1 {
            box-shadow: 6px 3px 8px #ccc, -3px 3px 8px #ccc;
            margin: 30px auto;
            width: 1330px;
            padding: 10px;
            border-radius: 8px;
            user-select: none;
            background-image: linear-gradient( to bottom, yellow, rgb(238, 253, 19), gold);
        }
        
        .users {
            width: 1366px;
            margin: 0 auto;
        }
        
        .users>ul {
            overflow: hidden;
            width: 1350px;
            margin: 0 auto;
        }
        
        .users>ul>li {
            list-style: none;
            width: 88px;
            border: 1px solid #ddd;
            margin: 7px;
            float: left;
            text-align: center;
            line-height: 40px;
            height: 40px;
            border-radius: 5px;
            user-select: none;
            font-size: 20px;
            box-shadow: 2px 2px 2px #ccc;
        }
        
        .users>ul>li:not(.mid) {
            background: #ddd;
        }
        
        .users>ul>li.mid {
            border: none;
            box-shadow: none;
        }
        
        .users>ul>li.student {
            background-color: aquamarine !important;
        }
        
        .users>ul>li.active {
            background-color: yellow !important;
        }
        
        #start {
            width: 150px;
            height: 50px;
            font-size: 26px;
            border-radius: 5px;
        }
    </style>
    <script>
        var data = {
            row5: ["王骏珷", "胡晗月", "", "韦延舜", "张书玮", "庞曰瑞", "", "", "张旭", "崔庆贺", "骆琪琪", "万能", ""],
            row4: ["竺钶", "", "", "吴松峰", "", "包凯", "", "邓高伟", "张洋", "", "涂文文", "", "蔡鑫", ],
            row3: ["", "韩奇杰", "", "何文凯", "林嘉妮", "谭春梅", "", "肖鹏", "李浩朋", "李晨", "陈文君", "李绍东", "", ],
            row2: ["", "程振生", "方城洪", "焦昱筱", "刘鑫", "冯文强", "", "张冰倩", "周勋臣", "王鹏杰", "郭静", "", "胡永坤", ],
            row1: ["孟慧敏", "沈旭阳", "王彬", "江鑫溢", "", "田家木", "", "王兴邦", "顾铖祥", "曹宽", "刘启亮", "", "", ]
        };

        window.onload = function() {
            var timer;
            var randomNumber;
            var startBtn = document.querySelector('#start');


            // 1. 初始化 将数据展示到页面中
            function init() {
                var users = document.querySelector('.users'),
                    list, //  ul 元素
                    tempLi; // li 元素

                // 遍历对象
                for (var key in data) {
                    list = document.createElement('ul'); // 创建列表 用于保存一行数据
                    for (var i = 0; i < data[key].length; i++) { // 遍历每一个属性 属性是数组
                        tempLi = document.createElement('li'); // 创建一个li元素
                        tempLi.innerHTML = data[key][i]; // 放入数据
                        data[key][i] && tempLi.setAttribute('class', 'student'); //判断数据对应的位置是否有人
                        i == 6 && tempLi.setAttribute('class', 'mid');
                        list.appendChild(tempLi); // 放入列表
                    }
                    users.appendChild(list); // 一行数据放入用户区域
                }

            }
            init();


            // 2. 抽奖 功能函数
            function start() {
                var students = document.querySelectorAll('.student');
                if (startBtn.dataset.flag == "start") {
                    startBtn.innerHTML = '停止';
                    startBtn.dataset.flag = "stop";

                    timer = setInterval(function() {
                        if (typeof randomNumber != 'undefined') { // 如果之前生成过随机数
                            students[randomNumber].classList.remove('active'); //删除对应索引的类名
                        }
                        randomNumber = Math.floor(Math.random() * students.length); // 再次生成新的随机数
                        students[randomNumber].classList.add('active'); // 添加类名

                    }, 100);

                } else {
                    startBtn.innerHTML = '开始';
                    startBtn.dataset.flag = "start";
                    clearInterval(timer);
                }


            }

            startBtn.onclick = start;

            document.onkeyup = function(ev) {
                if (ev.keyCode == 13 || ev.keyCode == 32) {
                    start();
                }
            }

        }
    </script>
</head>

<body>
    <h1>HZ-HTML5-2011 Super Lotto</h1>
    <div class="users"></div>
    <button id="start" data-flag="start">开始</button>
</body>

</html>

邮箱和身份证正则表达式：
window.onload = function() {
        var userinput = document.querySelector('#userinput');
        var result = document.querySelector('#result');

        // 练习 
        // 1.编写一个正则表达式 让输入框的内容为 邮箱格式验证
        // 用户名@域名


        // 2.验证身份证号格式
        // 18位
        // 12省份 34城市 56区县 生日
        // 最后4位 倒数第二位 性别
        // 最后一位验证码 x

        // 重点验证 生日部分
        // 起始年份1900 月份01-12 日期 01-31

        // 邮箱
        var reg = /(^\w{1,}@\w{1,}\.[A-Za-z]{1,7}\.?[A-Za-z]*$)/;
        // 身份证
        // var reg = /((^1[1-5])|(^2[1-3])|(^3[1-7])|(^4[1-6])|(^5[1-4])|(^6[1-5])|(^71)|(^8[1-2]))([0-9]{4})(19[0-9]{2})((0[1-9])|(1[1-2]))((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))([0-9]{2})([0-1])(X|[1-9])$/;
        userinput.onchange = function() {
            result.innerHTML = reg.test(this.value) ? '通过验证' : '未通过验证';
        }
    }
</script>

文本采集：
<script>
    // 文本采集
    // 防止 XSS 攻击  跨站脚本攻击
    // innerHTML 就是 跨站脚本攻击 重灾区

    // 1. 替换
    // 2. 混淆/转义  &lt; &gt;

    window.onload = function() {
        var input = document.getElementById('input');
        var output = document.getElementById('output');
        var submit = document.getElementById('submit');

        submit.onclick = function() {
            output.value = input.value.replace(/<[^<>]+>/g, ''); // 直接对标签进行匹配替换
        }
    }
</script>

表单验证：
<script>
    // 表单验证
    // 注册页面
    // 验证信息有 
    // 用户名 字母数字下划线 必须以字母开头 长度6-16位
    // 密码   任意字符 长度 6-16位
    // 确认密码 与密码相同
    // 邮箱   验证邮箱格式
    // 手机号  验证手机号
    window.onload = function() {
        let btn = document.getElementById("btn"),
            res = document.querySelectorAll(".res"),
            userpwd = document.getElementById("userpwd"),
            inps = document.getElementById("form").querySelectorAll("input"),
            regexpArr = [/^[A-Za-z]\w{5,15}$/, /^.{6,16}$/, "", /(^\w{1,}@\w{1,}\.[A-Za-z]{1,7}\.?[A-Za-z]*$)/, /^(?:(?:\+|00)86)?1[3-9]\d{9}$/];
        for (let i = 0; i < inps.length; i++) {
            inps[i].onblur = function(ev) {
                if (i == 2) {
                    this.nextElementSibling.innerHTML = this.value === userpwd.value ? "√" : "×";
                } else {
                    this.nextElementSibling.innerHTML = regexpArr[i].test(this.value) ? "√" : "×";
                }
                let count = 0;
                res.forEach(function(val) {
                    val.innerHTML === "√" ? count++ : count = count;
                    count == 5 ? btn.removeAttribute("disabled") : btn.setAttribute("disabled", "disabled");
                });
            }
        }
    }
</script>

密码强度检测：


使用正则表达式进行快速切换：
<script>
    var reg = /(\d+)([a-z]+)/;
    var str = '123486123lkas';
    console.log(reg.test(str));

    // // RegExp.$1  ... RegExp.$N
    // // 表示正则表达式的分组
    // // 在使用正则方法后可以使用 能获得匹配的内容
    // console.log(RegExp.$1);
    // console.log(RegExp.$2);

    var str2 = 'abc123';
    console.log(str2.replace(/([a-z]+)(\d+)/, '$2$1'));
    console.log(RegExp.$1);
    console.log(RegExp.$2);
</script>

缓冲运动：
<script>
    window.onload = function() {
        function getStyle(elm, style) {
            if (getComputedStyle) {
                return getComputedStyle(elm)[style];
            } else {
                return elm.currentStyle[style];
            }
        }

        function bufferMove(elm, style, target) { //  元素  属性  目标值
            let speed = 0;
            let timer;

            timer = setInterval(function() {
                let currentStyle = parseInt(getStyle(elm, style)); // 获得当前位置
                // 计算速度
                speed = (target - currentStyle) / 10;
                speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed); // 速度取整

                if (currentStyle === target) clearInterval(timer);

                elm.style[style] = currentStyle + speed + 'px';

            }, 20);
        }

        let box = document.querySelector('.box');

        bufferMove(box, 'width', 700);
    }
</script>

透明运动：
<script>
    window.onload = function() {


        function getStyle(elm, style) {
            if (typeof getComputedStyle === 'function') {
                return getComputedStyle(elm)[style];
            } else {
                return elm.currentStyle[style];
            }
        }

        // 使用回调函数解决执行顺序问题
        function bufferMove(elm, style, target, callback) { //  元素  属性  目标值
            var speed = 0;
            var timer;

            // 问题1： ie的透明度和标准浏览器的透明度 属性名 不同 值也不同  取值范围不同
            // 统一取值范围
            // 运算时 将标准浏览器的透明度 * 100  

            // 问题2： 透明度没有单位   定位宽高等属性 有单位  

            timer = setInterval(function() {
                var currentStyle;

                if (style === 'opacity') {
                    currentStyle = Math.ceil(getStyle(elm, style) * 100);
                } else {
                    currentStyle = parseInt(getStyle(elm, style)); // 获得当前位置
                }

                // console.log(currentStyle);


                // 计算速度
                speed = (target - currentStyle) / 10;
                speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed); // 速度取整

                if (currentStyle === target) {
                    clearInterval(timer);
                    callback && callback(); // 在动画结束后调用回调函数
                }

                if (style === 'opacity') {
                    elm.style[style] = (currentStyle + speed) / 100;
                    elm.style['filter'] = 'alpha(opacity=' + (currentStyle + speed) + ')';
                } else {
                    elm.style[style] = currentStyle + speed + 'px';
                }

            }, 20);
        }

        var box = document.getElementById('box');

        // bufferMove(box, 'opacity', 10);

        // bufferMove(box, 'width', 500)

    }
</script>