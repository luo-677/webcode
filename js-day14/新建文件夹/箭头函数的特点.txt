// 箭头函数 ES6新增的函数语法糖

// 简化了函数的语法

// function fn(n) {
//     return n;
// }

// console.log(fn(3));

// let fn = n => n;
// console.log(typeof fn);
// console.log(fn(5));

// 箭头函数的完整语法 ()=>{}
// (() => {
//     console.log('ok');
// })();

// 箭头函数通常用于回调函数 和 匿名函数

let arr = [326, 545, 23, 3215, 1213, 42];

// arr.sort(function(a, b) {
//     return a - b;
// });

// 当箭头函数的函数体内只有一条语句 且这条语句是返回语句时 可以省略大括号 和 return 关键字
// arr.sort((a, b) => a - b);

// console.log(arr);

// let result = arr.filter(function(elm) {
//     return elm % 2;
// });

// 当箭头函数的形参只有1个时可以省略小括号
// let result = arr.filter(elm => elm % 2);
// console.log(result);

// this 关键字 在JS中  是动态的指针
// this的指向和定义无关 和执行有关


// 箭头函数中的this 是静态的指向

// 箭头函数中this 指向定义时所在的环境

// 箭头函数有几个使用注意点。

// (1) 函数体内的this对象， 就是定义时所在的对象， 而不是使用时所在的对象。

// (2) 不可以当作构造函数， 也就是说， 不可以使用new命令， 否则会抛出一个错误。

// (3) 不可以使用arguments对象， 该对象在函数体内不存在。 如果要用， 可以用 rest 参数代替。

// (4) 不可以使用yield命令， 因此箭头函数不能用作 Generator 函数。

// 上面四点中， 第一点尤其值得注意。 this对象的指向是可变的， 但是在箭头函数中， 它是固定的。

// 箭头函数的this是继承过来的，所以在声明时如果函数已经决定了this的指向，指向不会再变

// 若箭头函数在定义时，上下文有具体的函数进行指向，那就直接继承上下文的this，不然则指向window